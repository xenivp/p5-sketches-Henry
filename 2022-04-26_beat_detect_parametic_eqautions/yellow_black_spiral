var soundFile;
 var amplitude;
 var SpiralColor = 0;
 var speedIncrease = false;
 
 // :: Beat Detect Variables
 // how many draw loop frames before the beatCutoff starts to decay
 // so that another beat can be triggered.
 // frameRate() is usually around 60 frames per second,
 // so 20 fps = 3 beats per second, meaning if the song is over 180 BPM,
 // we wont respond to every beat.
 var beatHoldFrames = 30;
 
 // what amplitude level can trigger a beat?
 var beatThreshold = 0.11; // origianl 0.11
 
 // When we have a beat, beatCutoff will be reset to 1.1*beatThreshold, and then decay
 // Level must be greater than beatThreshold and beatCutoff before the next beat can trigger.
 var beatCutoff = 0; // ORIGINAL 0
 var beatDecayRate = 0.98; // how fast does beat cutoff decay? ORIGIANL0.98
 var framesSinceLastBeat = 0; // once this equals beatHoldFrames, beatCutoff starts to decay.

 function preload() {
  soundFile = loadSound('../SKTTRD_WAITING_ROOM.mp3 ');
}

function setup() {
  createCanvas(720, 900);
  noStroke();
  rectMode(CENTER);

  amplitude = new p5.Amplitude();
  soundFile.play();
  amplitude.setInput(soundFile);
  amplitude.smooth(0.9);
}

let t = 0;
function draw() {

  background('#fff');
   translate(width/2,height/2);
   stroke(SpiralColor);
   strokeWeight(1.5);

   var level = amplitude.getLevel();
   detectBeat(level);

   var orangeness = 0;
   var alpha = 150;
  if( speedIncrease) { // when a beat is detected aount of lines increases
    for(let i = 0;i<100;i+=0.5){
     // stroke(orangeness,orangeness,0 ,alpha);
      line(x1(t+i),y1(t+i),x2(t+i)+20,y2(t+i)+20);
      //orangeness+=2;
    }
  } else {
    //loop for adding 100 lines ORIGINAL 
    for(let i = 0;i<100;i++){
     // stroke( orangeness,orangeness,0 , alpha);
      line(x1(t+i),y1(t+i),x2(t+i)+20,y2(t+i)+20);
     // orangeness+=2;
    }
  }
   t+=0.5;
   
}

function detectBeat(level) {
  if (level  > beatCutoff && level > beatThreshold){
    onBeat();
    beatCutoff = level *1.2;
    framesSinceLastBeat = 0;
  } else{
    if (framesSinceLastBeat <= beatHoldFrames){
      framesSinceLastBeat ++;
    }
    else{
      beatCutoff *= beatDecayRate;
      beatCutoff = Math.max(beatCutoff, beatThreshold);
    }
  }
}

function onBeat() {
  
  //SpiralColor = color( random(0,255), random(0,255), random(0.255) );
  speedIncrease = !speedIncrease;

}

// function to change initial x co-ordinate of the line
function x1(t){
  return sin(t/10)*125+sin(t/20)*125+sin(t/30)*125;
}

// function to change initial y co-ordinate of the line
function y1(t){
  return cos(t/10)*125+cos(t/20)*125+cos(t/30)*125;
}

// function to change final x co-ordinate of the line
function x2(t){
  return sin(t/15)*125+sin(t/25)*125+sin(t/35)*125;
}

// function to change final y co-ordinate of the line
function y2(t){
  return cos(t/15)*125+cos(t/25)*125+cos(t/35)*125;
}

function windowResized() {
  resizeCanvas(windowWidth, windowHeight);
  background(0);
}